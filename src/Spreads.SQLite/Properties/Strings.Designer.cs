// <auto-generated />

using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Resources;

namespace Spreads.SQLite.Properties
{
    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Spreads.SQLite.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// {methodName} can only be called when the connection is open.
        /// </summary>
        internal static string CallRequiresOpenConnection(object methodName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CallRequiresOpenConnection", "methodName"), methodName);
        }

        /// <summary>
        /// CommandText must be set before {methodName} can be called.
        /// </summary>
        internal static string CallRequiresSetCommandText(object methodName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CallRequiresSetCommandText", "methodName"), methodName);
        }

        /// <summary>
        /// ConnectionString cannot be set when the connection is open.
        /// </summary>
        internal static string ConnectionStringRequiresClosedConnection
        {
            get { return GetString("ConnectionStringRequiresClosedConnection"); }
        }

        /// <summary>
        /// Invalid attempt to call {operation} when reader is closed.
        /// </summary>
        internal static string DataReaderClosed(object operation)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DataReaderClosed", "operation"), operation);
        }

        /// <summary>
        /// The cache mode '{mode}' is invalid.
        /// </summary>
        internal static string InvalidCacheMode(object mode)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidCacheMode", "mode"), mode);
        }

        /// <summary>
        /// The CommandBehavior '{behavior}' is invalid.
        /// </summary>
        internal static string InvalidCommandBehavior(object behavior)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidCommandBehavior", "behavior"), behavior);
        }

        /// <summary>
        /// The CommandType '{commandType}' is invalid.
        /// </summary>
        internal static string InvalidCommandType(object commandType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidCommandType", "commandType"), commandType);
        }

        /// <summary>
        /// The IsolationLevel '{isolationLevel}' is invalid.
        /// </summary>
        internal static string InvalidIsolationLevel(object isolationLevel)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidIsolationLevel", "isolationLevel"), isolationLevel);
        }

        /// <summary>
        /// The IsolationLevel '{isolationLevel}' can only be used with a shared cache. Set 'Cache=Shared' in the connection string.
        /// </summary>
        internal static string InvalidIsolationLevelForUnsharedCache(object isolationLevel)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidIsolationLevelForUnsharedCache", "isolationLevel"), isolationLevel);
        }

        /// <summary>
        /// The ParameterDirection '{direction}' is invalid.
        /// </summary>
        internal static string InvalidParameterDirection(object direction)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidParameterDirection", "direction"), direction);
        }

        /// <summary>
        /// Keyword not supported: '{keyword}'.
        /// </summary>
        internal static string KeywordNotSupported(object keyword)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("KeywordNotSupported", "keyword"), keyword);
        }

        /// <summary>
        /// Must add values for the following parameters: {parameters}
        /// </summary>
        internal static string MissingParameters(object parameters)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MissingParameters", "parameters"), parameters);
        }

        /// <summary>
        /// No data exists for the row/column.
        /// </summary>
        internal static string NoData
        {
            get { return GetString("NoData"); }
        }

        /// <summary>
        /// ConnectionString must be set before Open can be called.
        /// </summary>
        internal static string OpenRequiresSetConnectionString
        {
            get { return GetString("OpenRequiresSetConnectionString"); }
        }

        /// <summary>
        /// SqliteConnection does not support nested transactions.
        /// </summary>
        internal static string ParallelTransactionsNotSupported
        {
            get { return GetString("ParallelTransactionsNotSupported"); }
        }

        /// <summary>
        /// A SqliteParameter with ParameterName '{parameterName}' is not contained by this SqliteParameterCollection.
        /// </summary>
        internal static string ParameterNotFound(object parameterName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ParameterNotFound", "parameterName"), parameterName);
        }

        /// <summary>
        /// {propertyName} must be set.
        /// </summary>
        internal static string RequiresSet(object propertyName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RequiresSet", "propertyName"), propertyName);
        }

        /// <summary>
        /// This SqliteTransaction has completed; it is no longer usable.
        /// </summary>
        internal static string TransactionCompleted
        {
            get { return GetString("TransactionCompleted"); }
        }

        /// <summary>
        /// The transaction object is not associated with the connection object.
        /// </summary>
        internal static string TransactionConnectionMismatch
        {
            get { return GetString("TransactionConnectionMismatch"); }
        }

        /// <summary>
        /// Execute requires the command to have a transaction object when the connection assigned to the command is in a pending local transaction.  The Transaction property of the command has not been initialized.
        /// </summary>
        internal static string TransactionRequired
        {
            get { return GetString("TransactionRequired"); }
        }

        /// <summary>
        /// No mapping exists from object type {typeName} to a known managed provider native type.
        /// </summary>
        internal static string UnknownDataType(object typeName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnknownDataType", "typeName"), typeName);
        }

        /// <summary>
        /// SQLite Error {errorCode}: '{message}'.
        /// </summary>
        internal static string SqliteNativeError(object errorCode, object message)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("SqliteNativeError", "errorCode", "message"), errorCode, message);
        }

        /// <summary>
        /// For more information on this error code see http://sqlite.org/rescode.html
        /// </summary>
        internal static string DefaultNativeError
        {
            get { return GetString("DefaultNativeError"); }
        }

        /// <summary>
        /// Cannot bind the value for parameter '{parameterName}' because multiple matching parameters were found in the command text. Specify the parameter name with the symbol prefix, e.g. '@{parameterName}'.
        /// </summary>
        internal static string AmbiguousParameterName(object parameterName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AmbiguousParameterName", "parameterName"), parameterName);
        }

        /// <summary>
        /// The SQLite library is already loaded. UseWinSqlite3 must be called before using SQLite.
        /// </summary>
        internal static string AlreadyLoaded
        {
            get { return GetString("AlreadyLoaded"); }
        }

        /// <summary>
        /// The {enumType} enumeration value, {value}, is invalid.
        /// </summary>
        internal static string InvalidEnumValue(object enumType, object value)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidEnumValue", "enumType", "value"), enumType, value);
        }

        /// <summary>
        /// Cannot convert object of type '{sourceType}' to object of type '{targetType}'.
        /// </summary>
        internal static string ConvertFailed(object sourceType, object targetType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ConvertFailed", "sourceType", "targetType"), sourceType, targetType);
        }

        /// <summary>
        /// Cannot store 'NaN' values.
        /// </summary>
        internal static string CannotStoreNaN
        {
            get { return GetString("CannotStoreNaN"); }
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
